--[[
	Written by hunxrepair
	2020/06/30
]]

local RepStorage		= game:GetService("ReplicatedStorage")
local Util				= require(RepStorage:WaitForChild("Scripts"):WaitForChild("Utilities"))
local Config			= require(Util("WFC", {RepStorage, "Scripts", "Configurations"}))

local Map				= game:GetService("Workspace"):WaitForChild("Map")

local Player = game.Players.LocalPlayer
local TS = game:GetService("TweenService")



local function SpringAction(SpringModel)
	local BP = SpringModel.Top.BodyPosition
	local BG = SpringModel.Top.BodyGyro

	local SpringPos = SpringModel.OrigCFrame.Value * CFrame.new(0, -3, 0)
	BG.CFrame = SpringPos

	SpringModel.Top.RetractSound:Play()
	local NewTween = TS:Create(BP, TweenInfo.new(SpringModel:GetAttribute("RetractionTime"), Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
		{Position = SpringPos.Position})
	NewTween:Play()
	NewTween.Completed:wait()
	wait(0.05)
	
	local SpringPos, Direction
	if SpringModel:GetAttribute("ThrowSideways") == true then
		if (Vector3.new(Player.Character.HumanoidRootPart.Position.X, 0, Player.Character.HumanoidRootPart.Position.Z) - Vector3.new(SpringModel.Top.Position.X, 0, SpringModel.Top.Position.Z)).Magnitude < SpringModel.Top.Size.X/4 then
			SpringPos = (SpringModel.OrigCFrame.Value + Vector3.new(0, 2, 0))
		else
			local Vector = SpringModel.Top.CFrame:VectorToObjectSpace((Player.Character.HumanoidRootPart.Position - SpringModel.Top.Position).unit) * Vector3.new(1, 0, 1)
			local Angle = math.deg(math.atan2(Vector.X, Vector.Z)) + 180

			local Increments = SpringModel:GetAttribute("AngleCount")
			local IncAngle = 0
			for w = 1, Increments do
				if Angle - IncAngle < 360 / Increments / 2 then
					break
				end
				IncAngle += 360 / Increments
			end
			Direction = (SpringModel.Top.CFrame * CFrame.Angles(0, math.rad(IncAngle), 0)).LookVector
			SpringPos = (SpringModel.OrigCFrame.Value + ((Direction * 3) + Vector3.new(0, 2, 0)))
			BG.CFrame = CFrame.new(SpringModel.Top.Position, SpringPos.Position + Vector3.new(0, -10, 0))
		end
	else
		SpringPos = (SpringModel.OrigCFrame.Value + Vector3.new(0, 2, 0))
	end
	
	local PlayerPos = Player.Character.HumanoidRootPart.CFrame
	SpringModel.Top.BounceSound:Play()
	local NewTween = TS:Create(BP, TweenInfo.new(0.5, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out),
		{Position = SpringPos.Position})
	NewTween:Play()
	wait(0.12)
	
	
	local SpringPos = SpringModel.OrigCFrame.Value
	local SpringSize = SpringModel.Top.Size
	if PlayerPos.Y > SpringPos.Y then
		if PlayerPos.X > SpringPos.X - SpringSize.X/2 - 0.5 and PlayerPos.X < SpringPos.X + SpringSize.X/2 + 0.5 then
			if PlayerPos.Z > SpringPos.Z - SpringSize.Z/2 - 0.5 and PlayerPos.Z < SpringPos.Z + SpringSize.Z/2 + 0.5 then
				local BV = Instance.new("BodyVelocity")
				BV.MaxForce = Vector3.new(1000000, 1000000, 1000000)
				BV.P = 100000
				if Direction then
					Direction = Direction * Vector3.new(1, 0, 1)
					BV.Velocity = Direction * SpringModel:GetAttribute("ThrowPower") + Vector3.new(0, SpringModel:GetAttribute("JumpPower"), 0)
				else
					BV.Velocity = Vector3.new(0, SpringModel:GetAttribute("JumpPower"), 0)
				end
				BV.Parent = Player.Character.HumanoidRootPart
				game.Debris:AddItem(BV, 0.2)
			end
		end
	end
	
	NewTween.Completed:wait()
	
	local SpringPos = SpringModel.OrigCFrame.Value
	BG.CFrame = SpringPos
	
	local NewTween = TS:Create(BP, TweenInfo.new(0.8, Enum.EasingStyle.Elastic, Enum.EasingDirection.Out),
		{Position = SpringPos.Position})
	NewTween:Play()
	NewTween.Completed:wait()
end


local function SetUpSprings(Stage)
	for i,SpringModel in pairs(Stage:GetDescendants()) do
		if SpringModel.ClassName ~= "Model" or SpringModel.Name ~= "SpringModel" then continue end
		local Spring = SpringModel:Clone()
		SpringModel:Destroy()
		
		local BP = Instance.new("BodyPosition")
		BP.MaxForce = Vector3.new(100000, 100000, 100000)
		BP.Position = Spring.Top.Position
		BP.D = 80
		BP.P = 3000
		BP.Parent = Spring.Top

		local BG = Instance.new("BodyGyro")
		BG.MaxTorque = Vector3.new(8000, 8000, 8000)
		BG.P = 150
		BG.D = 15
		BG.CFrame = Spring.Top.CFrame
		BG.Parent = Spring.Top

		Spring.Top.Anchored = false
		
		
		--local Increments = SpringModel:GetAttribute("AngleCount")
		--local IncAngle = 0
		--for w = 1, Increments do
		--	IncAngle += 360 / Increments

		--	local dwad = Util("NewObj", "Part",{
		--		Name = "dwadaw",
		--		Transparency = 0.3,
		--		Anchored = true,
		--		CanCollide = false,
		--		Shape = "Ball",
		--		Size = Vector3.new(1,1,1),
		--		CFrame = SpringModel.Top.CFrame + (SpringModel.Top.CFrame * CFrame.Angles(0, math.rad(IncAngle), 0)).LookVector * 3,
		--		Parent = SpringModel
		--	})
		--end
		
		Util("NewObj", "CFrameValue", {Name = "OrigCFrame", Value = Spring.Top.CFrame, Parent = Spring})

		for w = 1, 4 do
			local NewTrigger = Util("NewObj", "Part",{
				Name = "Trigger",
				Transparency = 1,
				Anchored = true,
				CanCollide = false,
				Shape = "Cylinder",
				Orientation = Vector3.new(0, -180, -90),
				Size = Vector3.new(2, Spring.Top.Size.X - 0.5, Spring.Top.Size.X - 0.5) * (w / 4),
				Position = Spring.Top.Position + Vector3.new(0, Spring.Top.Size.Y, 0),
				Parent = Spring
			})
			
			NewTrigger.Touched:Connect(function(Hit)
				if Player:GetAttribute("SpringJumping") == true then return end
				if Hit.Parent ~= Player.Character then return end
				if Player.Character.Torso.Velocity.Y > 3 then return end
				if Hit.Name ~= "Left Leg" and Hit.Name ~= "Right Leg" and Hit.Name ~= "Head" then return end

				task.spawn(function()
					Player:SetAttribute("SpringJumping", true)
					wait(0.5 + Spring:GetAttribute("RetractionTime"))
					Player:SetAttribute("SpringJumping", nil)
				end)
				SpringAction(Spring)
			end)
		end
		
		Spring.Parent = Stage
	end
end


local function ReturnFunction()
	for i,Stage in pairs(Map.Tower:GetChildren()) do
		SetUpSprings(Stage)
	end
	Map.Tower.ChildAdded:Connect(function(Stage)
		wait(3)
		SetUpSprings(Stage)
	end)
end


return ReturnFunction


